//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1



use sea_orm :: entity :: prelude :: * ;

# [derive (Copy , Clone , Default , Debug , DeriveEntity)] pub struct Entity ;

impl EntityName for Entity { fn table_name (& self) -> & str { "invoices" } }

# [derive (Clone , Debug , PartialEq , DeriveModel , DeriveActiveModel)] pub struct Model { pub invoice_id : i32 , pub customer_id : i32 , pub invoice_date : DateTime , pub billing_address : Option < String > , pub billing_city : Option < String > , pub billing_state : Option < String > , pub billing_country : Option < String > , pub billing_postal_code : Option < String > , pub total : f64 , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveColumn)] pub enum Column { # [sea_orm (column_name = "InvoiceId")] InvoiceId , # [sea_orm (column_name = "CustomerId")] CustomerId , # [sea_orm (column_name = "InvoiceDate")] InvoiceDate , # [sea_orm (column_name = "BillingAddress")] BillingAddress , # [sea_orm (column_name = "BillingCity")] BillingCity , # [sea_orm (column_name = "BillingState")] BillingState , # [sea_orm (column_name = "BillingCountry")] BillingCountry , # [sea_orm (column_name = "BillingPostalCode")] BillingPostalCode , # [sea_orm (column_name = "Total")] Total , }

# [derive (Copy , Clone , Debug , EnumIter , DerivePrimaryKey)] pub enum PrimaryKey { InvoiceId , }

impl PrimaryKeyTrait for PrimaryKey { type ValueType = i32 ; fn auto_increment () -> bool { true } }

# [derive (Copy , Clone , Debug , EnumIter)] pub enum Relation { Customers , InvoiceItems , }

impl ColumnTrait for Column { type EntityName = Entity ; fn def (& self) -> ColumnDef { match self { Self :: InvoiceId => ColumnType :: Integer . def () , Self :: CustomerId => ColumnType :: Integer . def () , Self :: InvoiceDate => ColumnType :: DateTime . def () , Self :: BillingAddress => ColumnType :: String (None) . def () . null () , Self :: BillingCity => ColumnType :: String (None) . def () . null () , Self :: BillingState => ColumnType :: String (None) . def () . null () , Self :: BillingCountry => ColumnType :: String (None) . def () . null () , Self :: BillingPostalCode => ColumnType :: String (None) . def () . null () , Self :: Total => ColumnType :: Double . def () , } } }

impl RelationTrait for Relation { fn def (& self) -> RelationDef { match self { Self :: Customers => Entity :: belongs_to (super :: customers :: Entity) . from (Column :: CustomerId) . to (super :: customers :: Column :: CustomerId) . into () , Self :: InvoiceItems => Entity :: has_many (super :: invoice_items :: Entity) . into () , } } }

impl Related < super :: customers :: Entity > for Entity { fn to () -> RelationDef { Relation :: Customers . def () } }

impl Related < super :: invoice_items :: Entity > for Entity { fn to () -> RelationDef { Relation :: InvoiceItems . def () } }

impl ActiveModelBehavior for ActiveModel { }