//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1



use sea_orm :: entity :: prelude :: * ;

# [derive (Copy , Clone , Default , Debug , DeriveEntity)] pub struct Entity ;

impl EntityName for Entity { fn table_name (& self) -> & str { "artists" } }

# [derive (Clone , Debug , PartialEq , DeriveModel , DeriveActiveModel)] pub struct Model { pub artist_id : i32 , pub name : Option < String > , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveColumn)] pub enum Column { # [sea_orm (column_name = "ArtistId")] ArtistId , # [sea_orm (column_name = "Name")] Name , }

# [derive (Copy , Clone , Debug , EnumIter , DerivePrimaryKey)] pub enum PrimaryKey { ArtistId , }

impl PrimaryKeyTrait for PrimaryKey { type ValueType = i32 ; fn auto_increment () -> bool { true } }

# [derive (Copy , Clone , Debug , EnumIter)] pub enum Relation { Albums , }

impl ColumnTrait for Column { type EntityName = Entity ; fn def (& self) -> ColumnDef { match self { Self :: ArtistId => ColumnType :: Integer . def () , Self :: Name => ColumnType :: String (None) . def () . null () , } } }

impl RelationTrait for Relation { fn def (& self) -> RelationDef { match self { Self :: Albums => Entity :: has_many (super :: albums :: Entity) . into () , } } }

impl Related < super :: albums :: Entity > for Entity { fn to () -> RelationDef { Relation :: Albums . def () } }

impl ActiveModelBehavior for ActiveModel { }