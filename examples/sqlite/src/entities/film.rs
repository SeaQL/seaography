//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.14

use sea_orm::entity::prelude::*;

#[sea_orm::model]
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "film")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub film_id: i32,
    pub title: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub release_year: Option<String>,
    pub language_id: i16,
    pub original_language_id: Option<i16>,
    pub rental_duration: i16,
    #[sea_orm(column_type = "Decimal(Some((4, 2)))")]
    pub rental_rate: Decimal,
    pub length: Option<i16>,
    #[sea_orm(column_type = "Decimal(Some((5, 2)))")]
    pub replacement_cost: Decimal,
    pub rating: Option<String>,
    pub special_features: Option<String>,
    pub last_update: DateTimeUtc,
    #[sea_orm(has_many)]
    pub inventories: HasMany<super::inventory::Entity>,
    #[sea_orm(
        belongs_to,
        relation_enum = "Language2",
        from = "original_language_id",
        to = "language_id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    pub language_2: HasOne<super::language::Entity>,
    #[sea_orm(
        belongs_to,
        relation_enum = "Language1",
        from = "language_id",
        to = "language_id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    pub language_1: HasOne<super::language::Entity>,
    #[sea_orm(has_many, via = "film_actor")]
    pub actors: HasMany<super::actor::Entity>,
    #[sea_orm(has_many, via = "film_category")]
    pub categories: HasMany<super::category::Entity>,
}

impl ActiveModelBehavior for ActiveModel {}
