# ! [doc = " SeaORM Entity. Generated by sea-orm-codegen 0.9.1"] use sea_orm :: entity :: prelude :: * ; # [derive (Copy , Clone , Default , Debug , DeriveEntity)] pub struct Entity ; impl EntityName for Entity { fn table_name (& self) -> & str { "staff" } } # [derive (Clone , Debug , PartialEq , DeriveModel , DeriveActiveModel , async_graphql :: SimpleObject , seaography_derive :: Filter)] # [sea_orm (table_name = "staff")] # [graphql (complex)] # [graphql (name = "Staff")] pub struct Model { pub staff_id : i32 , pub first_name : String , pub last_name : String , pub address_id : i16 , pub email : Option < String > , pub store_id : i16 , pub active : bool , pub username : String , pub password : Option < String > , pub last_update : DateTime , pub picture : Option < Vec < u8 > > , } # [derive (Copy , Clone , Debug , EnumIter , DeriveColumn)] pub enum Column { StaffId , FirstName , LastName , AddressId , Email , StoreId , Active , Username , Password , LastUpdate , Picture , } # [derive (Copy , Clone , Debug , EnumIter , DerivePrimaryKey)] pub enum PrimaryKey { StaffId , } impl PrimaryKeyTrait for PrimaryKey { type ValueType = i32 ; fn auto_increment () -> bool { true } } # [derive (Copy , Clone , Debug , EnumIter)] pub enum Relation { Address , Store , Payment , Rental , } impl ColumnTrait for Column { type EntityName = Entity ; fn def (& self) -> ColumnDef { match self { Self :: StaffId => ColumnType :: Integer . def () , Self :: FirstName => ColumnType :: String (Some (45u32)) . def () , Self :: LastName => ColumnType :: String (Some (45u32)) . def () , Self :: AddressId => ColumnType :: SmallInteger . def () , Self :: Email => ColumnType :: String (Some (50u32)) . def () . null () , Self :: StoreId => ColumnType :: SmallInteger . def () , Self :: Active => ColumnType :: Boolean . def () , Self :: Username => ColumnType :: String (Some (16u32)) . def () , Self :: Password => ColumnType :: String (Some (40u32)) . def () . null () , Self :: LastUpdate => ColumnType :: DateTime . def () , Self :: Picture => ColumnType :: Binary . def () . null () , } } } # [seaography_derive :: relation] impl RelationTrait for Relation { fn def (& self) -> RelationDef { match self { Self :: Address => Entity :: belongs_to (super :: address :: Entity) . from (Column :: AddressId) . to (super :: address :: Column :: AddressId) . into () , Self :: Store => Entity :: belongs_to (super :: store :: Entity) . from (Column :: StoreId) . to (super :: store :: Column :: StoreId) . into () , Self :: Payment => Entity :: has_many (super :: payment :: Entity) . into () , Self :: Rental => Entity :: has_many (super :: rental :: Entity) . into () , } } } impl Related < super :: address :: Entity > for Entity { fn to () -> RelationDef { Relation :: Address . def () } } impl Related < super :: store :: Entity > for Entity { fn to () -> RelationDef { Relation :: Store . def () } } impl Related < super :: payment :: Entity > for Entity { fn to () -> RelationDef { Relation :: Payment . def () } } impl Related < super :: rental :: Entity > for Entity { fn to () -> RelationDef { Relation :: Rental . def () } } impl ActiveModelBehavior for ActiveModel { }