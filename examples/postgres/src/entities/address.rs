# ! [doc = " SeaORM Entity. Generated by sea-orm-codegen 0.9.1"] use sea_orm :: entity :: prelude :: * ; # [derive (Copy , Clone , Default , Debug , DeriveEntity)] pub struct Entity ; impl EntityName for Entity { fn table_name (& self) -> & str { "address" } } # [derive (Clone , Debug , PartialEq , DeriveModel , DeriveActiveModel , async_graphql :: SimpleObject , seaography_derive :: Filter)] # [sea_orm (table_name = "address")] # [graphql (complex)] # [graphql (name = "Address")] pub struct Model { pub address_id : i32 , pub address : String , pub address2 : Option < String > , pub district : String , pub city_id : i16 , pub postal_code : Option < String > , pub phone : String , pub last_update : DateTime , } # [derive (Copy , Clone , Debug , EnumIter , DeriveColumn)] pub enum Column { AddressId , Address , Address2 , District , CityId , PostalCode , Phone , LastUpdate , } # [derive (Copy , Clone , Debug , EnumIter , DerivePrimaryKey)] pub enum PrimaryKey { AddressId , } impl PrimaryKeyTrait for PrimaryKey { type ValueType = i32 ; fn auto_increment () -> bool { true } } # [derive (Copy , Clone , Debug , EnumIter)] pub enum Relation { City , Staff , Store , Customer , } impl ColumnTrait for Column { type EntityName = Entity ; fn def (& self) -> ColumnDef { match self { Self :: AddressId => ColumnType :: Integer . def () , Self :: Address => ColumnType :: String (Some (50u32)) . def () , Self :: Address2 => ColumnType :: String (Some (50u32)) . def () . null () , Self :: District => ColumnType :: String (Some (20u32)) . def () , Self :: CityId => ColumnType :: SmallInteger . def () , Self :: PostalCode => ColumnType :: String (Some (10u32)) . def () . null () , Self :: Phone => ColumnType :: String (Some (20u32)) . def () , Self :: LastUpdate => ColumnType :: DateTime . def () , } } } # [seaography_derive :: relation] impl RelationTrait for Relation { fn def (& self) -> RelationDef { match self { Self :: City => Entity :: belongs_to (super :: city :: Entity) . from (Column :: CityId) . to (super :: city :: Column :: CityId) . into () , Self :: Staff => Entity :: has_many (super :: staff :: Entity) . into () , Self :: Store => Entity :: has_many (super :: store :: Entity) . into () , Self :: Customer => Entity :: has_many (super :: customer :: Entity) . into () , } } } impl Related < super :: city :: Entity > for Entity { fn to () -> RelationDef { Relation :: City . def () } } impl Related < super :: staff :: Entity > for Entity { fn to () -> RelationDef { Relation :: Staff . def () } } impl Related < super :: store :: Entity > for Entity { fn to () -> RelationDef { Relation :: Store . def () } } impl Related < super :: customer :: Entity > for Entity { fn to () -> RelationDef { Relation :: Customer . def () } } impl ActiveModelBehavior for ActiveModel { }