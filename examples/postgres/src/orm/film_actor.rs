//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "film_actor"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub actor_id: i16,
    pub film_id: i16,
    pub last_update: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    ActorId,
    FilmId,
    LastUpdate,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    ActorId,
    FilmId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (i16, i16);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Actor,
    Film,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::ActorId => ColumnType::SmallInteger.def(),
            Self::FilmId => ColumnType::SmallInteger.def(),
            Self::LastUpdate => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Actor => Entity::belongs_to(super::actor::Entity)
                .from(Column::ActorId)
                .to(super::actor::Column::ActorId)
                .into(),
            Self::Film => Entity::belongs_to(super::film::Entity)
                .from(Column::FilmId)
                .to(super::film::Column::FilmId)
                .into(),
        }
    }
}

impl Related<super::actor::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Actor.def()
    }
}

impl Related<super::film::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Film.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
