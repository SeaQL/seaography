//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "payment"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub payment_id: u16,
    pub customer_id: u16,
    pub staff_id: u8,
    pub rental_id: Option<i32>,
    pub amount: Decimal,
    pub payment_date: DateTime,
    pub last_update: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    PaymentId,
    CustomerId,
    StaffId,
    RentalId,
    Amount,
    PaymentDate,
    LastUpdate,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    PaymentId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = u16;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Customer,
    Rental,
    Staff,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::PaymentId => ColumnType::SmallUnsigned.def(),
            Self::CustomerId => ColumnType::SmallUnsigned.def(),
            Self::StaffId => ColumnType::TinyUnsigned.def(),
            Self::RentalId => ColumnType::Integer.def().null(),
            Self::Amount => ColumnType::Decimal(Some((5u32, 2u32))).def(),
            Self::PaymentDate => ColumnType::DateTime.def(),
            Self::LastUpdate => ColumnType::Timestamp.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Customer => Entity::belongs_to(super::customer::Entity)
                .from(Column::CustomerId)
                .to(super::customer::Column::CustomerId)
                .into(),
            Self::Rental => Entity::belongs_to(super::rental::Entity)
                .from(Column::RentalId)
                .to(super::rental::Column::RentalId)
                .into(),
            Self::Staff => Entity::belongs_to(super::staff::Entity)
                .from(Column::StaffId)
                .to(super::staff::Column::StaffId)
                .into(),
        }
    }
}

impl Related<super::customer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Customer.def()
    }
}

impl Related<super::rental::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rental.def()
    }
}

impl Related<super::staff::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Staff.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
