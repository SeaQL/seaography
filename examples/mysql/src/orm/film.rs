//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use super::sea_orm_active_enums::Rating;
use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "film"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub film_id: u16,
    pub title: String,
    pub description: Option<String>,
    pub release_year: Option<String>,
    pub language_id: u8,
    pub original_language_id: Option<u8>,
    pub rental_duration: u8,
    pub rental_rate: Decimal,
    pub length: Option<u16>,
    pub replacement_cost: Decimal,
    pub rating: Option<Rating>,
    pub special_features: Option<String>,
    pub last_update: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    FilmId,
    Title,
    Description,
    ReleaseYear,
    LanguageId,
    OriginalLanguageId,
    RentalDuration,
    RentalRate,
    Length,
    ReplacementCost,
    Rating,
    SpecialFeatures,
    LastUpdate,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    FilmId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = u16;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Language2,
    Language1,
    FilmCategory,
    FilmActor,
    Inventory,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::FilmId => ColumnType::SmallUnsigned.def(),
            Self::Title => ColumnType::String(Some(128u32)).def(),
            Self::Description => ColumnType::Text.def().null(),
            Self::ReleaseYear => ColumnType::Custom("YEAR".to_owned()).def().null(),
            Self::LanguageId => ColumnType::TinyUnsigned.def(),
            Self::OriginalLanguageId => ColumnType::TinyUnsigned.def().null(),
            Self::RentalDuration => ColumnType::TinyUnsigned.def(),
            Self::RentalRate => ColumnType::Decimal(Some((4u32, 2u32))).def(),
            Self::Length => ColumnType::SmallUnsigned.def().null(),
            Self::ReplacementCost => ColumnType::Decimal(Some((5u32, 2u32))).def(),
            Self::Rating => Rating::db_type().null(),
            Self::SpecialFeatures => ColumnType::Custom(
                "SET ('Trailers', 'Commentaries', 'Deleted Scenes', 'Behind the Scenes')"
                    .to_owned(),
            )
            .def()
            .null(),
            Self::LastUpdate => ColumnType::Timestamp.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Language2 => Entity::belongs_to(super::language::Entity)
                .from(Column::LanguageId)
                .to(super::language::Column::LanguageId)
                .into(),
            Self::Language1 => Entity::belongs_to(super::language::Entity)
                .from(Column::OriginalLanguageId)
                .to(super::language::Column::LanguageId)
                .into(),
            Self::FilmCategory => Entity::has_many(super::film_category::Entity).into(),
            Self::FilmActor => Entity::has_many(super::film_actor::Entity).into(),
            Self::Inventory => Entity::has_many(super::inventory::Entity).into(),
        }
    }
}

impl Related<super::film_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FilmCategory.def()
    }
}

impl Related<super::film_actor::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FilmActor.def()
    }
}

impl Related<super::inventory::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Inventory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
