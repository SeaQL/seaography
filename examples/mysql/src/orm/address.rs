//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "address"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub address_id: u16,
    pub address: String,
    pub address2: Option<String>,
    pub district: String,
    pub city_id: u16,
    pub postal_code: Option<String>,
    pub phone: String,
    pub location: String,
    pub last_update: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    AddressId,
    Address,
    Address2,
    District,
    CityId,
    PostalCode,
    Phone,
    Location,
    LastUpdate,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    AddressId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = u16;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    City,
    Customer,
    Store,
    Staff,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::AddressId => ColumnType::SmallUnsigned.def(),
            Self::Address => ColumnType::String(Some(50u32)).def(),
            Self::Address2 => ColumnType::String(Some(50u32)).def().null(),
            Self::District => ColumnType::String(Some(20u32)).def(),
            Self::CityId => ColumnType::SmallUnsigned.def(),
            Self::PostalCode => ColumnType::String(Some(10u32)).def().null(),
            Self::Phone => ColumnType::String(Some(20u32)).def(),
            Self::Location => ColumnType::Custom("GEOMETRY".to_owned()).def(),
            Self::LastUpdate => ColumnType::Timestamp.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::City => Entity::belongs_to(super::city::Entity)
                .from(Column::CityId)
                .to(super::city::Column::CityId)
                .into(),
            Self::Customer => Entity::has_many(super::customer::Entity).into(),
            Self::Store => Entity::has_many(super::store::Entity).into(),
            Self::Staff => Entity::has_many(super::staff::Entity).into(),
        }
    }
}

impl Related<super::city::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::City.def()
    }
}

impl Related<super::customer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Customer.def()
    }
}

impl Related<super::store::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Store.def()
    }
}

impl Related<super::staff::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Staff.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
