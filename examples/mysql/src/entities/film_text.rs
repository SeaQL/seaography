# ! [doc = " SeaORM Entity. Generated by sea-orm-codegen 0.9.1"] use sea_orm :: entity :: prelude :: * ; # [derive (Copy , Clone , Default , Debug , DeriveEntity)] pub struct Entity ; impl EntityName for Entity { fn table_name (& self) -> & str { "film_text" } } # [derive (Clone , Debug , PartialEq , DeriveModel , DeriveActiveModel , async_graphql :: SimpleObject , seaography_derive :: Filter)] # [sea_orm (table_name = "film_text")] # [graphql (complex)] # [graphql (name = "FilmText")] pub struct Model { pub film_id : i16 , pub title : String , pub description : Option < String > , } # [derive (Copy , Clone , Debug , EnumIter , DeriveColumn)] pub enum Column { FilmId , Title , Description , } # [derive (Copy , Clone , Debug , EnumIter , DerivePrimaryKey)] pub enum PrimaryKey { FilmId , } impl PrimaryKeyTrait for PrimaryKey { type ValueType = i16 ; fn auto_increment () -> bool { false } } # [derive (Copy , Clone , Debug , EnumIter)] pub enum Relation { } impl ColumnTrait for Column { type EntityName = Entity ; fn def (& self) -> ColumnDef { match self { Self :: FilmId => ColumnType :: SmallInteger . def () , Self :: Title => ColumnType :: String (Some (255u32)) . def () , Self :: Description => ColumnType :: Text . def () . null () , } } } # [seaography_derive :: relation] impl RelationTrait for Relation { fn def (& self) -> RelationDef { panic ! ("No RelationDef") } } impl ActiveModelBehavior for ActiveModel { }