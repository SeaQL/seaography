name: tests

on:
  pull_request:
  push:
    branches:
      - main
      - pr/**/ci

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
    check:
        name: Check
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  override: true
            - uses: actions-rs/cargo@v1
              with:
                  command: check
    test:
        name: Test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  override: true
            - uses: actions-rs/cargo@v1
              with:
                  command: test
                  args: "--workspace"
    fmt:
        name: Format
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  override: true
            - run: rustup component add rustfmt
            - uses: actions-rs/cargo@v1
              with:
                  command: fmt
                  args: "--all -- --check"
    clippy:
        name: Lint
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  override: true
            - run: rustup component add clippy
            - uses: actions-rs/cargo@v1
              with:
                  command: clippy
                  args: "-- -D warnings"
    integration-sqlite-poem:
        name: SQLite integration tests
        runs-on: ubuntu-latest
        needs:
            - check
            - test
        steps:
            - uses: actions/checkout@v2
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  override: true
            - name: Remove generated folder
              run: rm -rf ./examples/sqlite/src
            - name: Copy sample database
              run: cp ./examples/sqlite/sakila.db .
            - uses: actions-rs/cargo@v1
              with:
                  command: run
                  args: >
                    --package seaography-cli --
                    -f poem sqlite://sakila.db seaography-sqlite-example ./examples/sqlite
            - name: Depends on local seaography
              run: sed -i '/^\[dependencies.seaography\]$/a \path = "..\/..\/"' ./examples/sqlite/Cargo.toml
            - name: Integration tests
              working-directory: ./examples/sqlite
              run: cargo test

    integration-sqlite-actix:
        name: SQLite integration tests
        runs-on: ubuntu-latest
        needs:
            - check
            - test
        steps:
            - uses: actions/checkout@v2
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  override: true
            - name: Remove generated folder
              run: rm -rf ./examples/sqlite/src
            - name: Copy sample database
              run: cp ./examples/sqlite/sakila.db .
            - uses: actions-rs/cargo@v1
              with:
                  command: run
                  args: >
                    --package seaography-cli --
                    -f actix sqlite://sakila.db seaography-sqlite-example ./examples/sqlite
            - name: Depends on local seaography
              run: sed -i '/^\[dependencies.seaography\]$/a \path = "..\/..\/"' ./examples/sqlite/Cargo.toml
            - name: Integration tests
              working-directory: ./examples/sqlite
              run: cargo test

    integration-mysql:
        name: MySQL integration tests
        runs-on: ubuntu-latest
        needs:
            - check
            - test
        services:
            mysql:
                image: "mysql:8.0"
                env:
                    MYSQL_HOST: 127.0.0.1
                    MYSQL_DB: mysql
                    MYSQL_USER: sea
                    MYSQL_PASSWORD: sea
                    MYSQL_ALLOW_EMPTY_PASSWORD: yes
                    MYSQL_ROOT_PASSWORD: ""
                ports:
                    - "3306:3306"
                options: >-
                    --health-cmd="mysqladmin ping" --health-interval=10s
                    --health-timeout=5s --health-retries=3
        steps:
            - uses: actions/checkout@v2
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  override: true
            - name: Remove generated folder
              run: rm -rf ./examples/mysql/src
            - name: Create DB
              run: mysql -uroot -h 127.0.0.1 mysql -e 'CREATE DATABASE `sakila`'
            - name: Grant Privilege
              run: mysql -uroot -h 127.0.0.1 mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'sea'@'%'"
            - name: Import DB Schema
              run: mysql -uroot -h 127.0.0.1 sakila < sakila-schema.sql
              working-directory: ./examples/mysql
            - name: Import DB Data
              run: mysql -uroot -h 127.0.0.1 sakila < sakila-data.sql
              working-directory: ./examples/mysql
            - uses: actions-rs/cargo@v1
              with:
                  command: run
                  args: >
                    --package seaography-cli --
                    mysql://sea:sea@127.0.0.1/sakila seaography-mysql-example ./examples/mysql
            - name: Depends on local seaography
              run: sed -i '/^\[dependencies.seaography\]$/a \path = "..\/..\/"' ./examples/mysql/Cargo.toml
            - name: Integration tests
              working-directory: ./examples/mysql
              run: cargo test

    integration-postgres:
        name: Postgres integration tests
        runs-on: ubuntu-latest
        needs:
            - check
            - test
        services:
            mysql:
                image: "postgres:14.4"
                env:
                    POSTGRES_HOST: 127.0.0.1
                    POSTGRES_USER: sea
                    POSTGRES_PASSWORD: sea
                ports:
                    - "5432:5432"
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        steps:
            - uses: actions/checkout@v2
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  override: true
            - name: Remove generated folder
              run: rm -rf ./examples/postgres/src
            - name: Create DB
              run: psql -q postgres://sea:sea@localhost/postgres -c 'CREATE DATABASE "sakila"'
            - name: Import DB Schema
              run: psql -q postgres://sea:sea@localhost/sakila < sakila-schema.sql
              working-directory: ./examples/postgres
            - name: Import DB Data
              run: psql -q postgres://sea:sea@localhost/sakila < sakila-data.sql
              working-directory: ./examples/postgres
            - uses: actions-rs/cargo@v1
              with:
                  command: run
                  args: >
                    --package seaography-cli --
                    postgres://sea:sea@127.0.0.1/sakila?currentSchema=public seaography-postgres-example ./examples/postgres
            - name: Depends on local seaography
              run: sed -i '/^\[dependencies.seaography\]$/a \path = "..\/..\/"' ./examples/postgres/Cargo.toml
            - name: Integration tests
              working-directory: ./examples/postgres
              run: cargo test
